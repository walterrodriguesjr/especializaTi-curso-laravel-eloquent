1-intro 


1-o que é o eloquent ORM do laravel 
-serve para gerenciar bancos de dados relacionais de maneira simples(querys)
-está ligado diretamente ao uso de models 
-possibilita fazer filtros 
-possibilita trabalhar com APIs 
-utiliza o querybuilder 

2-instalar e configurar o laravel com docker 
-instalado o meu template de laravel com docker 
-configurado o .env
-criado o banco de dados do curso
-após instalar, removido o versionamento anterior do git
    rm -rf .git/
-acessar o campo do artisa: 
    docker-compose exec app bash
-alterar o timezone dentro de app.php 
    'timezone' => 'America/Sao_Paulo',

3-versionar projeto laravel com Git e armazenar no github 
-criado novo repositório no github
-git init iniciar um novo projeto 
-adicionar somente os arquivos permitidos(erro gerado em arquivos docker ignorados)
    git * 

4-models e migrations no laravel 
-model = tabela, onde são configurados as colunas da tabela em questão, onde tmb é feito os relacionamentos 
-migration = onde são configuradas as tabelas que serão enviadas para o banco, com suas respectivas colunas 
-criada uma migration de teste com nome Post, juntamente com o respectivo arquivo de migration 
    php artisan make:model Post -m

5-conexão com banco de dados no laravel 
-explicação do .env em relação ao banco de dados que será criado 
    tipo de banco, HOST, PORT, DATABASE etc... 
-o arquivo database.php armazena os dados de configuração de banco de dados 


02-migrations e ferramentas 

1-comandos de migration no laravel e mysql workbench 
-conectando com um gerenciador de banco de dados(no caso o dbeaver)
-rodado as migration 
    php artisan migrate 

2-instalar o telescope e o debugbar 
-ferramentas para debugar o banco de dados
-telescope = serve para monitorar as ações referentes ao banco de dados
-para usar, basta digitar: /telescope   após o endereço no browser
    composer require laravel/telescope
    php artisan telescope:install
    rodar a migration do criada pelo telescope 
        php artisan migrate
-debugbar = instala o devtools específico do laravel, mostrando routes, queries e models em uso
    composer require barryvdh/laravel-debugbar --dev

3-opções de colunas de migrations no laravel 
-explicado a estrutura e sintaxe usado nas migrations 

4-chave estrangeira no laravel 
-relacionamento onToMay - um para muitos, a tabela mais fraca ganha a FK 
-mostrado 2 exemplos de se criar um relacionamento entre 2 colunas de tableas diferentes 

5-laravel-criar colunas novas em tabelas sem perder os dados 
-instalado composer require doctrine/dbal
    para alterar as estruturas de tabelas 
-criada uma nova migration para inserir uma nova coluna na tabela users 
    php artisan make:migration ass_collumn_date_users
    em seguida, configurada a nova migration com a coluna date
    rodada a migration 


03-iniciando com o eloquent 

1-personalização de models no laravel 
-explicado as possibilidades de fugir do padrão do laravel em models e migrations, 
    podendo ser personalizada(não recomendável)

2-opções de consultas no eloquent do laravel 
-criação de usuarios fake, usando a o UserFactory.php 
    utiliza o tinker: 
        php artisan tinker
        dentro dele: \App\Models\User::factory()->count(100)->create();
-ao chamar a class User, pode finalizar com: 
     all() que trará tudo;
     get(), que possibilita especificação usando where() e muitos outros. ex: where('id', id), o where() possibilita fazer vários tipos de filtros
     first() traz o primeiro encontrado, irá trazer o primeiro da lista, se não houver mais especificações
     find() já espera no parametro o valor do id buscado
     findOrFail() espera no parametro o id do dado, caso não exista, retorna automaticamente uma exception de erro 404 na tela (not found)
-resumindo, estes métodos do laravel eloquent, servem para fazer query de maneira mais enxutas, não sendo necessário fazer: "'select' * 'from' 'users'", por exemplo

3-laravel eloquent filtrar registros 
-usando o where() e dentro de seu parâmetro, é especificado como deve ser filtrado a busca, sempre finalizando com get(), first() etc...
-quando a busca do where() é específica(ex:ver nos 'name', palavras que comecem com 'a', pode se usar o 'LIKE' como comparação)
-é possível encadear mais de uma query seguida, usando em seguida o orWhere() fazendo uma nova query, na mesma busca 
-é possível finalizar com toSql() para imprimir na tela a query por extenso para verificação 
-o whereIn(), espera como parametro, o nome da coluna, e em seguida, um array de dados referentes 
-é possível usar uma função de callBack dentro de uma query 

4-laravel eloquent-paginação
-paginate() = método que permite paginar o a busca de dados referente a model em questão, por default pagina os itens de 15 em 15, porem, em seu parametro, é possível especificar o número de itens por página 

5-laravel eloquent-ordenação 
-orderBy() = método que permite ordenar a busca e consequentemente o retorno dos dados, no parametro é possível
     especificar por qual dado do objeto será ordenado, e em seguida, de qual maneira, crescente ou descrescente 
        ex: orderBy('name', 'desc')

6-laravel eloquent-inserir registro no banco 
-save() = método do eloquent para, após estar com os dados a serem salvos prontos dentro do objeto, envia os dados para o banco 
-foi feito um exemplo para inserir de forma mais manual 

7-laravel eloquent-Mass Assignment
-create() = método do eloquent que também serve para enviar dados para o banco, porem, em seu parâmetro, ele 
    espera um array com a atribuição dos dados a serem salvo, isso se o $fillable da model estiver configurada;
    não necessita uso do save(), pois o próprio create() faz o trabalho de submeter. 
-$fillable[] = serve para que, na model da class em questão, diga quais campos podem ser trabalhados 

8-laravel eloquent-atualizar registro no banco 
-após localizar qual linha ta tabela será alterada, find(id), é feita a atribuição dos novos dados no array, dentro do próprio método update()
-é possivel também, fazendo da mesma maneira, porém dentro do updateOrCreate() onde tendo 2 arrays, se já existir com o respectivo dado chave, atualiza, senão, ele cria 

9-laravel eloquent-deletar registros do banco 
-delete() = após identificar qual linha será deletada, find(id), utiliza-se o método do eloquent delete()

10-laravel eloquent-soft deleting 
-na referida tabela, cria-se a coluna softDeletes(), através da sua migration 
-na model da referida tabela, usa a trait de softdelete, use SoftDeletes;
-a partir disso, tudo que for deletado desta tabela, ainda continuará na tabela, com a data que foi deletado, porém não será usado nas requisições comuns 


04-Accessors e Mutators 

1-laravel eloquent-criando um Accessor 
-é um função criada direta na model da class em questão, que, em seu nome, especifica qual atributo será alterado, 
    esperando o parametro $value, e no corpo da função, retorna algum método PHP, junto com o parametro. 
    O nome da função espera que seja relacionado a algum atributo desta model 
-é possivel centralizar os métodos Accessor todos em um diretório próprio, ficando global para qualquer model 
    desde que na model, seja chamado o arquivo php do Accessor 

2-laravel eloquent-Casting 
-serve pra que, determinado atributo da tabela, seja especificado que o retorno vai ser no formato especificado no $cast, dentro da model da class em questão 

3-laravel eloquent-criando um Mutator 
-método similar ao Accessor, porém, este serve para modificar o dado antes que ele chegue ao banco, quando for salvo 


05-avançando com eloquent 

1-laravel eloquent-Local Scope 
-possibilita criar funções na model, relacionadas a filtros, e que podem ser utilizadas no controller da respectiva model, 
    não sendo necessário cria-la varias vezes na lógica do controller, apenas a chamando.
    muito usada em querys.

2-laravel eloquent-Anonumous Global Scopes 
-ok, não é a forma mais recomendada de se fazer uma função global

3-laravel eloquent-Global Scopes
-a vantagem de ter um método global(em uma classe própria), é poder ser reaproveitado em todas as models

4-laravel eloquent-Observers 
-serve para capturar eventos realizados em model, após o evento, pode realizar alguma ação
-cria-se uma classe para o observer da referida classe, a qual cria os métodos que irá monitorar 
    cada ação relativa a referida model 
    php artisan make:observer PostObserver --model=Post 
-precisa o observer e a model, serem vinculados em EventServiceProvider.php 

5-laravel eloquent-eventos 
-ok 


05-Factories 

1-laravel Factories e Seeders 
-usados por exemplo, para criar dados fake no banco para teste, junto com o Tinker 


